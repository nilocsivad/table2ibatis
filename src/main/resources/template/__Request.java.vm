/**
 * 
 */
package ${package_request_base};

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.web.servlet.support.RequestContext;

import ${package_model}.__Model;
import ${package_c}.IAPP;
import ${package_ref}.RandomString;
import ${package_util}.ConstUtil;
import ${package_util}.MapUtil;
import ${package_util}.StringUtil;

/**
 * @author Colin
 */
public class __Request implements IAPP {

	protected static final String REDIRECT = "redirect:";

	/**
	 * 
	 */
	public __Request() {
	}

	private RequestContext reqCtx;
	
	protected String getMessage(HttpServletRequest request, String key) {
		if (reqCtx == null) {
			reqCtx = new RequestContext(request);
		}
		return reqCtx.getMessage(key);
	}

	protected boolean existsText(HttpServletRequest request, String find) {
		String uri = request.getRequestURI();
		return uri.indexOf(find) > 0;
	}

	protected String getSuffixOfURL(HttpServletRequest request, String find) {
		String uri = request.getRequestURI();
		if (uri.contains(";")) {
			uri = uri.substring(0, uri.indexOf(";"));
		}
		return uri.substring(uri.indexOf(find) + find.length());
	}

	protected String getHttpProj(HttpServletRequest request) {
		int port = request.getServerPort();
		String http = request.getServerName() + (port == 80 ? "" : ":" + port) + "/" + request.getContextPath() + "/";
		return request.getScheme() + "://" + http.replace("//", "/");
	}

	protected String getHttpResource(HttpServletRequest request) {
		int port = request.getServerPort();
		String http = request.getServerName() + (port == 80 ? "" : ":" + port) + "/" + ConstUtil.getResourcePrefix() + "/";
		return request.getScheme() + "://" + http.replace("//", "/");
	}

	protected String suffix(String file) {
		int index = file.lastIndexOf(".");
		if (index < 0) {
			return "";
		}
		return file.substring(index);
	}
	
	protected String storageImage(String folder, MultipartFile file) throws FileNotFoundException, IOException {

		folder = StringUtil.toPath(folder);

		String folderPath = ConstUtil.getResourcePath(); /// E:\resource or /appdata/resource
		File folderRes = new File(folderPath, folder);
		if (folderRes.exists() == false) {
			folderRes.mkdirs();
		}
		
		String suffix = this.suffix(file.getOriginalFilename());

		String fileName = String.format("%014Xd-%s%s", System.currentTimeMillis(), new RandomString(14), suffix);
		File fileImage = new File(folderRes, fileName);

		file.transferTo(fileImage);

		return folder + "/" + fileName;
	}

	protected String storageImage(String folder, InputStream imageStream, String suffix) throws FileNotFoundException, IOException {

		folder = StringUtil.toPath(folder);

		String folderPath = ConstUtil.getResourcePath(); /// E:\resource or /appdata/resource
		File folderRes = new File(folderPath, folder);
		if (folderRes.exists() == false) {
			folderRes.mkdirs();
		}


		String fileName = String.format("%014Xd-%s%s", System.currentTimeMillis(), new RandomString(14), suffix);
		File fileImage = new File(folderRes, fileName);

		BufferedInputStream input = new BufferedInputStream(imageStream);
		BufferedOutputStream output = new BufferedOutputStream(new FileOutputStream(fileImage));
		int len = 0;
		byte[] buf = new byte[1024 * 24]; /// 24k ///
		while ((len = input.read(buf)) > 0) {
			output.write(buf, 0, len);
		}
		input.close();
		output.close();
	
		return folder + "/" + fileName;
	}

}
